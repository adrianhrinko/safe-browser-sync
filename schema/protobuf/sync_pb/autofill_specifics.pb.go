// Copyright (c) 2012 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// Sync protocol datatype extension for autofill.

// If you change or add any fields in this file, update proto_visitors.h and
// potentially proto_enum_conversions.{h, cc}.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.15.7
// source: autofill_specifics.proto

package sync_pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CardIssuer_Issuer int32

const (
	CardIssuer_ISSUER_UNKNOWN CardIssuer_Issuer = 0
	// Card where the issuer is Google.
	CardIssuer_GOOGLE CardIssuer_Issuer = 1
)

// Enum value maps for CardIssuer_Issuer.
var (
	CardIssuer_Issuer_name = map[int32]string{
		0: "ISSUER_UNKNOWN",
		1: "GOOGLE",
	}
	CardIssuer_Issuer_value = map[string]int32{
		"ISSUER_UNKNOWN": 0,
		"GOOGLE":         1,
	}
)

func (x CardIssuer_Issuer) Enum() *CardIssuer_Issuer {
	p := new(CardIssuer_Issuer)
	*p = x
	return p
}

func (x CardIssuer_Issuer) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CardIssuer_Issuer) Descriptor() protoreflect.EnumDescriptor {
	return file_autofill_specifics_proto_enumTypes[0].Descriptor()
}

func (CardIssuer_Issuer) Type() protoreflect.EnumType {
	return &file_autofill_specifics_proto_enumTypes[0]
}

func (x CardIssuer_Issuer) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CardIssuer_Issuer) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CardIssuer_Issuer(num)
	return nil
}

// Deprecated: Use CardIssuer_Issuer.Descriptor instead.
func (CardIssuer_Issuer) EnumDescriptor() ([]byte, []int) {
	return file_autofill_specifics_proto_rawDescGZIP(), []int{3, 0}
}

type WalletMaskedCreditCard_WalletCardStatus int32

const (
	WalletMaskedCreditCard_VALID   WalletMaskedCreditCard_WalletCardStatus = 0
	WalletMaskedCreditCard_EXPIRED WalletMaskedCreditCard_WalletCardStatus = 1
)

// Enum value maps for WalletMaskedCreditCard_WalletCardStatus.
var (
	WalletMaskedCreditCard_WalletCardStatus_name = map[int32]string{
		0: "VALID",
		1: "EXPIRED",
	}
	WalletMaskedCreditCard_WalletCardStatus_value = map[string]int32{
		"VALID":   0,
		"EXPIRED": 1,
	}
)

func (x WalletMaskedCreditCard_WalletCardStatus) Enum() *WalletMaskedCreditCard_WalletCardStatus {
	p := new(WalletMaskedCreditCard_WalletCardStatus)
	*p = x
	return p
}

func (x WalletMaskedCreditCard_WalletCardStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WalletMaskedCreditCard_WalletCardStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_autofill_specifics_proto_enumTypes[1].Descriptor()
}

func (WalletMaskedCreditCard_WalletCardStatus) Type() protoreflect.EnumType {
	return &file_autofill_specifics_proto_enumTypes[1]
}

func (x WalletMaskedCreditCard_WalletCardStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *WalletMaskedCreditCard_WalletCardStatus) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = WalletMaskedCreditCard_WalletCardStatus(num)
	return nil
}

// Deprecated: Use WalletMaskedCreditCard_WalletCardStatus.Descriptor instead.
func (WalletMaskedCreditCard_WalletCardStatus) EnumDescriptor() ([]byte, []int) {
	return file_autofill_specifics_proto_rawDescGZIP(), []int{4, 0}
}

type WalletMaskedCreditCard_WalletCardType int32

const (
	WalletMaskedCreditCard_UNKNOWN     WalletMaskedCreditCard_WalletCardType = 0
	WalletMaskedCreditCard_AMEX        WalletMaskedCreditCard_WalletCardType = 1
	WalletMaskedCreditCard_DISCOVER    WalletMaskedCreditCard_WalletCardType = 2
	WalletMaskedCreditCard_JCB         WalletMaskedCreditCard_WalletCardType = 3
	WalletMaskedCreditCard_MAESTRO     WalletMaskedCreditCard_WalletCardType = 4
	WalletMaskedCreditCard_MASTER_CARD WalletMaskedCreditCard_WalletCardType = 5
	WalletMaskedCreditCard_SOLO        WalletMaskedCreditCard_WalletCardType = 6
	WalletMaskedCreditCard_SWITCH      WalletMaskedCreditCard_WalletCardType = 7
	WalletMaskedCreditCard_VISA        WalletMaskedCreditCard_WalletCardType = 8
	WalletMaskedCreditCard_UNIONPAY    WalletMaskedCreditCard_WalletCardType = 9
)

// Enum value maps for WalletMaskedCreditCard_WalletCardType.
var (
	WalletMaskedCreditCard_WalletCardType_name = map[int32]string{
		0: "UNKNOWN",
		1: "AMEX",
		2: "DISCOVER",
		3: "JCB",
		4: "MAESTRO",
		5: "MASTER_CARD",
		6: "SOLO",
		7: "SWITCH",
		8: "VISA",
		9: "UNIONPAY",
	}
	WalletMaskedCreditCard_WalletCardType_value = map[string]int32{
		"UNKNOWN":     0,
		"AMEX":        1,
		"DISCOVER":    2,
		"JCB":         3,
		"MAESTRO":     4,
		"MASTER_CARD": 5,
		"SOLO":        6,
		"SWITCH":      7,
		"VISA":        8,
		"UNIONPAY":    9,
	}
)

func (x WalletMaskedCreditCard_WalletCardType) Enum() *WalletMaskedCreditCard_WalletCardType {
	p := new(WalletMaskedCreditCard_WalletCardType)
	*p = x
	return p
}

func (x WalletMaskedCreditCard_WalletCardType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WalletMaskedCreditCard_WalletCardType) Descriptor() protoreflect.EnumDescriptor {
	return file_autofill_specifics_proto_enumTypes[2].Descriptor()
}

func (WalletMaskedCreditCard_WalletCardType) Type() protoreflect.EnumType {
	return &file_autofill_specifics_proto_enumTypes[2]
}

func (x WalletMaskedCreditCard_WalletCardType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *WalletMaskedCreditCard_WalletCardType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = WalletMaskedCreditCard_WalletCardType(num)
	return nil
}

// Deprecated: Use WalletMaskedCreditCard_WalletCardType.Descriptor instead.
func (WalletMaskedCreditCard_WalletCardType) EnumDescriptor() ([]byte, []int) {
	return file_autofill_specifics_proto_rawDescGZIP(), []int{4, 1}
}

type AutofillWalletSpecifics_WalletInfoType int32

const (
	AutofillWalletSpecifics_UNKNOWN                      AutofillWalletSpecifics_WalletInfoType = 0
	AutofillWalletSpecifics_MASKED_CREDIT_CARD           AutofillWalletSpecifics_WalletInfoType = 1
	AutofillWalletSpecifics_POSTAL_ADDRESS               AutofillWalletSpecifics_WalletInfoType = 2
	AutofillWalletSpecifics_CUSTOMER_DATA                AutofillWalletSpecifics_WalletInfoType = 3
	AutofillWalletSpecifics_CREDIT_CARD_CLOUD_TOKEN_DATA AutofillWalletSpecifics_WalletInfoType = 4
)

// Enum value maps for AutofillWalletSpecifics_WalletInfoType.
var (
	AutofillWalletSpecifics_WalletInfoType_name = map[int32]string{
		0: "UNKNOWN",
		1: "MASKED_CREDIT_CARD",
		2: "POSTAL_ADDRESS",
		3: "CUSTOMER_DATA",
		4: "CREDIT_CARD_CLOUD_TOKEN_DATA",
	}
	AutofillWalletSpecifics_WalletInfoType_value = map[string]int32{
		"UNKNOWN":                      0,
		"MASKED_CREDIT_CARD":           1,
		"POSTAL_ADDRESS":               2,
		"CUSTOMER_DATA":                3,
		"CREDIT_CARD_CLOUD_TOKEN_DATA": 4,
	}
)

func (x AutofillWalletSpecifics_WalletInfoType) Enum() *AutofillWalletSpecifics_WalletInfoType {
	p := new(AutofillWalletSpecifics_WalletInfoType)
	*p = x
	return p
}

func (x AutofillWalletSpecifics_WalletInfoType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AutofillWalletSpecifics_WalletInfoType) Descriptor() protoreflect.EnumDescriptor {
	return file_autofill_specifics_proto_enumTypes[3].Descriptor()
}

func (AutofillWalletSpecifics_WalletInfoType) Type() protoreflect.EnumType {
	return &file_autofill_specifics_proto_enumTypes[3]
}

func (x AutofillWalletSpecifics_WalletInfoType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *AutofillWalletSpecifics_WalletInfoType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = AutofillWalletSpecifics_WalletInfoType(num)
	return nil
}

// Deprecated: Use AutofillWalletSpecifics_WalletInfoType.Descriptor instead.
func (AutofillWalletSpecifics_WalletInfoType) EnumDescriptor() ([]byte, []int) {
	return file_autofill_specifics_proto_rawDescGZIP(), []int{8, 0}
}

type WalletMetadataSpecifics_Type int32

const (
	WalletMetadataSpecifics_UNKNOWN WalletMetadataSpecifics_Type = 0
	WalletMetadataSpecifics_CARD    WalletMetadataSpecifics_Type = 1
	WalletMetadataSpecifics_ADDRESS WalletMetadataSpecifics_Type = 2
)

// Enum value maps for WalletMetadataSpecifics_Type.
var (
	WalletMetadataSpecifics_Type_name = map[int32]string{
		0: "UNKNOWN",
		1: "CARD",
		2: "ADDRESS",
	}
	WalletMetadataSpecifics_Type_value = map[string]int32{
		"UNKNOWN": 0,
		"CARD":    1,
		"ADDRESS": 2,
	}
)

func (x WalletMetadataSpecifics_Type) Enum() *WalletMetadataSpecifics_Type {
	p := new(WalletMetadataSpecifics_Type)
	*p = x
	return p
}

func (x WalletMetadataSpecifics_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WalletMetadataSpecifics_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_autofill_specifics_proto_enumTypes[4].Descriptor()
}

func (WalletMetadataSpecifics_Type) Type() protoreflect.EnumType {
	return &file_autofill_specifics_proto_enumTypes[4]
}

func (x WalletMetadataSpecifics_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *WalletMetadataSpecifics_Type) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = WalletMetadataSpecifics_Type(num)
	return nil
}

// Deprecated: Use WalletMetadataSpecifics_Type.Descriptor instead.
func (WalletMetadataSpecifics_Type) EnumDescriptor() ([]byte, []int) {
	return file_autofill_specifics_proto_rawDescGZIP(), []int{9, 0}
}

// An AutofillProfile.
type AutofillProfileSpecifics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Guid     *string `protobuf:"bytes,15,opt,name=guid" json:"guid,omitempty"`
	Origin   *string `protobuf:"bytes,16,opt,name=origin" json:"origin,omitempty"`
	UseCount *int64  `protobuf:"varint,22,opt,name=use_count,json=useCount" json:"use_count,omitempty"`
	// The time_t value of the last time this profile was used. This
	// value makes sense wrt base::Time::To/FromTimeT, which measures
	// from the Windows epoch.
	UseDate *int64 `protobuf:"varint,23,opt,name=use_date,json=useDate" json:"use_date,omitempty"`
	// Contact info.
	NameFirst    []string `protobuf:"bytes,2,rep,name=name_first,json=nameFirst" json:"name_first,omitempty"`
	NameMiddle   []string `protobuf:"bytes,3,rep,name=name_middle,json=nameMiddle" json:"name_middle,omitempty"`
	NameLast     []string `protobuf:"bytes,4,rep,name=name_last,json=nameLast" json:"name_last,omitempty"`
	NameFull     []string `protobuf:"bytes,21,rep,name=name_full,json=nameFull" json:"name_full,omitempty"`
	EmailAddress []string `protobuf:"bytes,5,rep,name=email_address,json=emailAddress" json:"email_address,omitempty"`
	CompanyName  *string  `protobuf:"bytes,6,opt,name=company_name,json=companyName" json:"company_name,omitempty"`
	// Address.
	AddressHomeLine1   *string `protobuf:"bytes,7,opt,name=address_home_line1,json=addressHomeLine1" json:"address_home_line1,omitempty"`
	AddressHomeLine2   *string `protobuf:"bytes,8,opt,name=address_home_line2,json=addressHomeLine2" json:"address_home_line2,omitempty"`
	AddressHomeCity    *string `protobuf:"bytes,9,opt,name=address_home_city,json=addressHomeCity" json:"address_home_city,omitempty"`
	AddressHomeState   *string `protobuf:"bytes,10,opt,name=address_home_state,json=addressHomeState" json:"address_home_state,omitempty"`
	AddressHomeZip     *string `protobuf:"bytes,11,opt,name=address_home_zip,json=addressHomeZip" json:"address_home_zip,omitempty"`
	AddressHomeCountry *string `protobuf:"bytes,12,opt,name=address_home_country,json=addressHomeCountry" json:"address_home_country,omitempty"`
	// Additional address fields for i18n.
	AddressHomeStreetAddress     *string `protobuf:"bytes,17,opt,name=address_home_street_address,json=addressHomeStreetAddress" json:"address_home_street_address,omitempty"`
	AddressHomeSortingCode       *string `protobuf:"bytes,18,opt,name=address_home_sorting_code,json=addressHomeSortingCode" json:"address_home_sorting_code,omitempty"`
	AddressHomeDependentLocality *string `protobuf:"bytes,19,opt,name=address_home_dependent_locality,json=addressHomeDependentLocality" json:"address_home_dependent_locality,omitempty"`
	AddressHomeLanguageCode      *string `protobuf:"bytes,20,opt,name=address_home_language_code,json=addressHomeLanguageCode" json:"address_home_language_code,omitempty"`
	// Phone.
	PhoneHomeWholeNumber []string `protobuf:"bytes,13,rep,name=phone_home_whole_number,json=phoneHomeWholeNumber" json:"phone_home_whole_number,omitempty"`
	// Validity bitfield.
	// Each set of two bits represents the validity state of a specific part of
	// the Autofill address. For more info please refer to autofill_profile.h.
	ValidityStateBitfield *int64 `protobuf:"varint,24,opt,name=validity_state_bitfield,json=validityStateBitfield" json:"validity_state_bitfield,omitempty"`
	// Denotes whether the validity_state_bitfield is updated according to the
	// changes in the autofill profile values.
	IsClientValidityStatesUpdated *bool `protobuf:"varint,25,opt,name=is_client_validity_states_updated,json=isClientValidityStatesUpdated" json:"is_client_validity_states_updated,omitempty"`
	// Deprecated.
	//
	// Deprecated: Do not use.
	Label *string `protobuf:"bytes,1,opt,name=label" json:"label,omitempty"`
	// Deprecated: Do not use.
	PhoneFaxWholeNumber *string `protobuf:"bytes,14,opt,name=phone_fax_whole_number,json=phoneFaxWholeNumber" json:"phone_fax_whole_number,omitempty"`
}

func (x *AutofillProfileSpecifics) Reset() {
	*x = AutofillProfileSpecifics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_autofill_specifics_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AutofillProfileSpecifics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AutofillProfileSpecifics) ProtoMessage() {}

func (x *AutofillProfileSpecifics) ProtoReflect() protoreflect.Message {
	mi := &file_autofill_specifics_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AutofillProfileSpecifics.ProtoReflect.Descriptor instead.
func (*AutofillProfileSpecifics) Descriptor() ([]byte, []int) {
	return file_autofill_specifics_proto_rawDescGZIP(), []int{0}
}

func (x *AutofillProfileSpecifics) GetGuid() string {
	if x != nil && x.Guid != nil {
		return *x.Guid
	}
	return ""
}

func (x *AutofillProfileSpecifics) GetOrigin() string {
	if x != nil && x.Origin != nil {
		return *x.Origin
	}
	return ""
}

func (x *AutofillProfileSpecifics) GetUseCount() int64 {
	if x != nil && x.UseCount != nil {
		return *x.UseCount
	}
	return 0
}

func (x *AutofillProfileSpecifics) GetUseDate() int64 {
	if x != nil && x.UseDate != nil {
		return *x.UseDate
	}
	return 0
}

func (x *AutofillProfileSpecifics) GetNameFirst() []string {
	if x != nil {
		return x.NameFirst
	}
	return nil
}

func (x *AutofillProfileSpecifics) GetNameMiddle() []string {
	if x != nil {
		return x.NameMiddle
	}
	return nil
}

func (x *AutofillProfileSpecifics) GetNameLast() []string {
	if x != nil {
		return x.NameLast
	}
	return nil
}

func (x *AutofillProfileSpecifics) GetNameFull() []string {
	if x != nil {
		return x.NameFull
	}
	return nil
}

func (x *AutofillProfileSpecifics) GetEmailAddress() []string {
	if x != nil {
		return x.EmailAddress
	}
	return nil
}

func (x *AutofillProfileSpecifics) GetCompanyName() string {
	if x != nil && x.CompanyName != nil {
		return *x.CompanyName
	}
	return ""
}

func (x *AutofillProfileSpecifics) GetAddressHomeLine1() string {
	if x != nil && x.AddressHomeLine1 != nil {
		return *x.AddressHomeLine1
	}
	return ""
}

func (x *AutofillProfileSpecifics) GetAddressHomeLine2() string {
	if x != nil && x.AddressHomeLine2 != nil {
		return *x.AddressHomeLine2
	}
	return ""
}

func (x *AutofillProfileSpecifics) GetAddressHomeCity() string {
	if x != nil && x.AddressHomeCity != nil {
		return *x.AddressHomeCity
	}
	return ""
}

func (x *AutofillProfileSpecifics) GetAddressHomeState() string {
	if x != nil && x.AddressHomeState != nil {
		return *x.AddressHomeState
	}
	return ""
}

func (x *AutofillProfileSpecifics) GetAddressHomeZip() string {
	if x != nil && x.AddressHomeZip != nil {
		return *x.AddressHomeZip
	}
	return ""
}

func (x *AutofillProfileSpecifics) GetAddressHomeCountry() string {
	if x != nil && x.AddressHomeCountry != nil {
		return *x.AddressHomeCountry
	}
	return ""
}

func (x *AutofillProfileSpecifics) GetAddressHomeStreetAddress() string {
	if x != nil && x.AddressHomeStreetAddress != nil {
		return *x.AddressHomeStreetAddress
	}
	return ""
}

func (x *AutofillProfileSpecifics) GetAddressHomeSortingCode() string {
	if x != nil && x.AddressHomeSortingCode != nil {
		return *x.AddressHomeSortingCode
	}
	return ""
}

func (x *AutofillProfileSpecifics) GetAddressHomeDependentLocality() string {
	if x != nil && x.AddressHomeDependentLocality != nil {
		return *x.AddressHomeDependentLocality
	}
	return ""
}

func (x *AutofillProfileSpecifics) GetAddressHomeLanguageCode() string {
	if x != nil && x.AddressHomeLanguageCode != nil {
		return *x.AddressHomeLanguageCode
	}
	return ""
}

func (x *AutofillProfileSpecifics) GetPhoneHomeWholeNumber() []string {
	if x != nil {
		return x.PhoneHomeWholeNumber
	}
	return nil
}

func (x *AutofillProfileSpecifics) GetValidityStateBitfield() int64 {
	if x != nil && x.ValidityStateBitfield != nil {
		return *x.ValidityStateBitfield
	}
	return 0
}

func (x *AutofillProfileSpecifics) GetIsClientValidityStatesUpdated() bool {
	if x != nil && x.IsClientValidityStatesUpdated != nil {
		return *x.IsClientValidityStatesUpdated
	}
	return false
}

// Deprecated: Do not use.
func (x *AutofillProfileSpecifics) GetLabel() string {
	if x != nil && x.Label != nil {
		return *x.Label
	}
	return ""
}

// Deprecated: Do not use.
func (x *AutofillProfileSpecifics) GetPhoneFaxWholeNumber() string {
	if x != nil && x.PhoneFaxWholeNumber != nil {
		return *x.PhoneFaxWholeNumber
	}
	return ""
}

type AutofillSpecifics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// If any of these 3 fields are present, then all 3 should be, and it implies
	// that this entity represents a classic autofill object.  In this case,
	// none of the autofill++ objects below should be present.
	Name           *string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Value          *string `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
	UsageTimestamp []int64 `protobuf:"varint,3,rep,name=usage_timestamp,json=usageTimestamp" json:"usage_timestamp,omitempty"`
	// An autofill++ profile object.  If present, indicates this entity
	// represents an AutofillProfile exclusively, and no other fields (such as
	// name/value or credit_card) should be present.
	Profile *AutofillProfileSpecifics `protobuf:"bytes,4,opt,name=profile" json:"profile,omitempty"`
}

func (x *AutofillSpecifics) Reset() {
	*x = AutofillSpecifics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_autofill_specifics_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AutofillSpecifics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AutofillSpecifics) ProtoMessage() {}

func (x *AutofillSpecifics) ProtoReflect() protoreflect.Message {
	mi := &file_autofill_specifics_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AutofillSpecifics.ProtoReflect.Descriptor instead.
func (*AutofillSpecifics) Descriptor() ([]byte, []int) {
	return file_autofill_specifics_proto_rawDescGZIP(), []int{1}
}

func (x *AutofillSpecifics) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *AutofillSpecifics) GetValue() string {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return ""
}

func (x *AutofillSpecifics) GetUsageTimestamp() []int64 {
	if x != nil {
		return x.UsageTimestamp
	}
	return nil
}

func (x *AutofillSpecifics) GetProfile() *AutofillProfileSpecifics {
	if x != nil {
		return x.Profile
	}
	return nil
}

// TODO(crbug.com/1020740): Deprecated, remove this once dependent change is
// done. Use WalletCreditCardCloudTokenData instead.
type CloudTokenData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Last 4-5 digits of the Cloud Primary Account Number (CPAN).
	Suffix *string `protobuf:"bytes,1,opt,name=suffix" json:"suffix,omitempty"`
	// CPAN Month number 1-12.
	ExpMonth *int32 `protobuf:"varint,2,opt,name=exp_month,json=expMonth" json:"exp_month,omitempty"`
	// CPAN Four-digit year (e.g. 2017).
	ExpYear *int32 `protobuf:"varint,3,opt,name=exp_year,json=expYear" json:"exp_year,omitempty"`
	// URL of the card art to be displayed for CPAN.
	ArtFifeUrl *string `protobuf:"bytes,4,opt,name=art_fife_url,json=artFifeUrl" json:"art_fife_url,omitempty"`
	// Opaque identifier for the cloud token associated with the payment
	// instrument.
	InstrumentToken *string `protobuf:"bytes,5,opt,name=instrument_token,json=instrumentToken" json:"instrument_token,omitempty"`
}

func (x *CloudTokenData) Reset() {
	*x = CloudTokenData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_autofill_specifics_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloudTokenData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloudTokenData) ProtoMessage() {}

func (x *CloudTokenData) ProtoReflect() protoreflect.Message {
	mi := &file_autofill_specifics_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloudTokenData.ProtoReflect.Descriptor instead.
func (*CloudTokenData) Descriptor() ([]byte, []int) {
	return file_autofill_specifics_proto_rawDescGZIP(), []int{2}
}

func (x *CloudTokenData) GetSuffix() string {
	if x != nil && x.Suffix != nil {
		return *x.Suffix
	}
	return ""
}

func (x *CloudTokenData) GetExpMonth() int32 {
	if x != nil && x.ExpMonth != nil {
		return *x.ExpMonth
	}
	return 0
}

func (x *CloudTokenData) GetExpYear() int32 {
	if x != nil && x.ExpYear != nil {
		return *x.ExpYear
	}
	return 0
}

func (x *CloudTokenData) GetArtFifeUrl() string {
	if x != nil && x.ArtFifeUrl != nil {
		return *x.ArtFifeUrl
	}
	return ""
}

func (x *CloudTokenData) GetInstrumentToken() string {
	if x != nil && x.InstrumentToken != nil {
		return *x.InstrumentToken
	}
	return ""
}

type CardIssuer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Issuer *CardIssuer_Issuer `protobuf:"varint,1,opt,name=issuer,enum=sync_pb.CardIssuer_Issuer" json:"issuer,omitempty"`
}

func (x *CardIssuer) Reset() {
	*x = CardIssuer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_autofill_specifics_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CardIssuer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CardIssuer) ProtoMessage() {}

func (x *CardIssuer) ProtoReflect() protoreflect.Message {
	mi := &file_autofill_specifics_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CardIssuer.ProtoReflect.Descriptor instead.
func (*CardIssuer) Descriptor() ([]byte, []int) {
	return file_autofill_specifics_proto_rawDescGZIP(), []int{3}
}

func (x *CardIssuer) GetIssuer() CardIssuer_Issuer {
	if x != nil && x.Issuer != nil {
		return *x.Issuer
	}
	return CardIssuer_ISSUER_UNKNOWN
}

type WalletMaskedCreditCard struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Server-generated unique ID string. This is opaque to the client.
	Id *string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	// What the server thinks of this card.
	Status     *WalletMaskedCreditCard_WalletCardStatus `protobuf:"varint,2,opt,name=status,enum=sync_pb.WalletMaskedCreditCard_WalletCardStatus" json:"status,omitempty"`
	NameOnCard *string                                  `protobuf:"bytes,3,opt,name=name_on_card,json=nameOnCard" json:"name_on_card,omitempty"`
	Type       *WalletMaskedCreditCard_WalletCardType   `protobuf:"varint,4,opt,name=type,enum=sync_pb.WalletMaskedCreditCard_WalletCardType" json:"type,omitempty"`
	// Last 4 digits of the credit card number.
	LastFour *string `protobuf:"bytes,5,opt,name=last_four,json=lastFour" json:"last_four,omitempty"`
	// Month number 1-12.
	ExpMonth *int32 `protobuf:"varint,6,opt,name=exp_month,json=expMonth" json:"exp_month,omitempty"`
	// Four-digit year (e.g. 2017).
	ExpYear *int32 `protobuf:"varint,7,opt,name=exp_year,json=expYear" json:"exp_year,omitempty"`
	// The WalletPostalAddress.id of the billing address.
	BillingAddressId *string `protobuf:"bytes,8,opt,name=billing_address_id,json=billingAddressId" json:"billing_address_id,omitempty"`
	// Issuing Bank name which is internationalized (e.g. "Chase", "工商银行")
	BankName *string `protobuf:"bytes,10,opt,name=bank_name,json=bankName" json:"bank_name,omitempty"`
	// TODO(crbug.com/1020740): Deprecated, remove this once dependent change is
	// done.
	// Use WalletCreditCardCloudTokenData instead. This field will be set if
	// a cloud token is available for the instrument.
	CloudTokenData *CloudTokenData `protobuf:"bytes,11,opt,name=cloud_token_data,json=cloudTokenData" json:"cloud_token_data,omitempty"`
	// The card's nickname, if it exists.
	Nickname *string `protobuf:"bytes,12,opt,name=nickname" json:"nickname,omitempty"`
	// Issuer of the card.
	CardIssuer *CardIssuer `protobuf:"bytes,13,opt,name=card_issuer,json=cardIssuer" json:"card_issuer,omitempty"`
}

func (x *WalletMaskedCreditCard) Reset() {
	*x = WalletMaskedCreditCard{}
	if protoimpl.UnsafeEnabled {
		mi := &file_autofill_specifics_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WalletMaskedCreditCard) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WalletMaskedCreditCard) ProtoMessage() {}

func (x *WalletMaskedCreditCard) ProtoReflect() protoreflect.Message {
	mi := &file_autofill_specifics_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WalletMaskedCreditCard.ProtoReflect.Descriptor instead.
func (*WalletMaskedCreditCard) Descriptor() ([]byte, []int) {
	return file_autofill_specifics_proto_rawDescGZIP(), []int{4}
}

func (x *WalletMaskedCreditCard) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *WalletMaskedCreditCard) GetStatus() WalletMaskedCreditCard_WalletCardStatus {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return WalletMaskedCreditCard_VALID
}

func (x *WalletMaskedCreditCard) GetNameOnCard() string {
	if x != nil && x.NameOnCard != nil {
		return *x.NameOnCard
	}
	return ""
}

func (x *WalletMaskedCreditCard) GetType() WalletMaskedCreditCard_WalletCardType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return WalletMaskedCreditCard_UNKNOWN
}

func (x *WalletMaskedCreditCard) GetLastFour() string {
	if x != nil && x.LastFour != nil {
		return *x.LastFour
	}
	return ""
}

func (x *WalletMaskedCreditCard) GetExpMonth() int32 {
	if x != nil && x.ExpMonth != nil {
		return *x.ExpMonth
	}
	return 0
}

func (x *WalletMaskedCreditCard) GetExpYear() int32 {
	if x != nil && x.ExpYear != nil {
		return *x.ExpYear
	}
	return 0
}

func (x *WalletMaskedCreditCard) GetBillingAddressId() string {
	if x != nil && x.BillingAddressId != nil {
		return *x.BillingAddressId
	}
	return ""
}

func (x *WalletMaskedCreditCard) GetBankName() string {
	if x != nil && x.BankName != nil {
		return *x.BankName
	}
	return ""
}

func (x *WalletMaskedCreditCard) GetCloudTokenData() *CloudTokenData {
	if x != nil {
		return x.CloudTokenData
	}
	return nil
}

func (x *WalletMaskedCreditCard) GetNickname() string {
	if x != nil && x.Nickname != nil {
		return *x.Nickname
	}
	return ""
}

func (x *WalletMaskedCreditCard) GetCardIssuer() *CardIssuer {
	if x != nil {
		return x.CardIssuer
	}
	return nil
}

// Different than an AutofillProfile because this represents some known address
// on the server that is pulled down rather than synced between Chromes.
type WalletPostalAddress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            *string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	RecipientName *string `protobuf:"bytes,12,opt,name=recipient_name,json=recipientName" json:"recipient_name,omitempty"`
	CompanyName   *string `protobuf:"bytes,2,opt,name=company_name,json=companyName" json:"company_name,omitempty"`
	// This is the street address, of which there may be multiple lines. This
	// corresponds to "address_home_line[1|2] in the AutofillProfileSpecifics
	// message above. In some locales there may be more than two lines.
	StreetAddress []string `protobuf:"bytes,3,rep,name=street_address,json=streetAddress" json:"street_address,omitempty"`
	// Also known as "administrative area". This is normally the state or
	// province in most countries.
	Address_1 *string `protobuf:"bytes,4,opt,name=address_1,json=address1" json:"address_1,omitempty"`
	// Also known as "locality". In the US this is the city.
	Address_2 *string `protobuf:"bytes,5,opt,name=address_2,json=address2" json:"address_2,omitempty"`
	// A sub-classification beneath the city, e.g. an inner-city district or
	// suburb. Also known as "dependent_locality"
	Address_3 *string `protobuf:"bytes,6,opt,name=address_3,json=address3" json:"address_3,omitempty"`
	// Used in certain countries. Also known as "sub_dependent_locality".
	Address_4  *string `protobuf:"bytes,7,opt,name=address_4,json=address4" json:"address_4,omitempty"`
	PostalCode *string `protobuf:"bytes,8,opt,name=postal_code,json=postalCode" json:"postal_code,omitempty"`
	// Similar to the zipcode column, but used for businesses or organizations
	// that might not be geographically contiguous. The canonical example is
	// CEDEX in France.
	SortingCode  *string `protobuf:"bytes,9,opt,name=sorting_code,json=sortingCode" json:"sorting_code,omitempty"`
	CountryCode  *string `protobuf:"bytes,10,opt,name=country_code,json=countryCode" json:"country_code,omitempty"`
	LanguageCode *string `protobuf:"bytes,11,opt,name=language_code,json=languageCode" json:"language_code,omitempty"`
	// Phone number. The format is unspecified and will be explicitly ignored.
	PhoneNumber *string `protobuf:"bytes,13,opt,name=phone_number,json=phoneNumber" json:"phone_number,omitempty"`
}

func (x *WalletPostalAddress) Reset() {
	*x = WalletPostalAddress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_autofill_specifics_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WalletPostalAddress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WalletPostalAddress) ProtoMessage() {}

func (x *WalletPostalAddress) ProtoReflect() protoreflect.Message {
	mi := &file_autofill_specifics_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WalletPostalAddress.ProtoReflect.Descriptor instead.
func (*WalletPostalAddress) Descriptor() ([]byte, []int) {
	return file_autofill_specifics_proto_rawDescGZIP(), []int{5}
}

func (x *WalletPostalAddress) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *WalletPostalAddress) GetRecipientName() string {
	if x != nil && x.RecipientName != nil {
		return *x.RecipientName
	}
	return ""
}

func (x *WalletPostalAddress) GetCompanyName() string {
	if x != nil && x.CompanyName != nil {
		return *x.CompanyName
	}
	return ""
}

func (x *WalletPostalAddress) GetStreetAddress() []string {
	if x != nil {
		return x.StreetAddress
	}
	return nil
}

func (x *WalletPostalAddress) GetAddress_1() string {
	if x != nil && x.Address_1 != nil {
		return *x.Address_1
	}
	return ""
}

func (x *WalletPostalAddress) GetAddress_2() string {
	if x != nil && x.Address_2 != nil {
		return *x.Address_2
	}
	return ""
}

func (x *WalletPostalAddress) GetAddress_3() string {
	if x != nil && x.Address_3 != nil {
		return *x.Address_3
	}
	return ""
}

func (x *WalletPostalAddress) GetAddress_4() string {
	if x != nil && x.Address_4 != nil {
		return *x.Address_4
	}
	return ""
}

func (x *WalletPostalAddress) GetPostalCode() string {
	if x != nil && x.PostalCode != nil {
		return *x.PostalCode
	}
	return ""
}

func (x *WalletPostalAddress) GetSortingCode() string {
	if x != nil && x.SortingCode != nil {
		return *x.SortingCode
	}
	return ""
}

func (x *WalletPostalAddress) GetCountryCode() string {
	if x != nil && x.CountryCode != nil {
		return *x.CountryCode
	}
	return ""
}

func (x *WalletPostalAddress) GetLanguageCode() string {
	if x != nil && x.LanguageCode != nil {
		return *x.LanguageCode
	}
	return ""
}

func (x *WalletPostalAddress) GetPhoneNumber() string {
	if x != nil && x.PhoneNumber != nil {
		return *x.PhoneNumber
	}
	return ""
}

// Contains information about a Payments Customer.
type PaymentsCustomerData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The billable customer ID associated with the account.
	Id *string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (x *PaymentsCustomerData) Reset() {
	*x = PaymentsCustomerData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_autofill_specifics_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PaymentsCustomerData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PaymentsCustomerData) ProtoMessage() {}

func (x *PaymentsCustomerData) ProtoReflect() protoreflect.Message {
	mi := &file_autofill_specifics_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PaymentsCustomerData.ProtoReflect.Descriptor instead.
func (*PaymentsCustomerData) Descriptor() ([]byte, []int) {
	return file_autofill_specifics_proto_rawDescGZIP(), []int{6}
}

func (x *PaymentsCustomerData) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

// Contains information about the cloud token data of server credit cards.
type WalletCreditCardCloudTokenData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Server-generated ID string for the card this cloud token data is related
	// to. This should match the id in WalletMaskedCreditCard for to fetch the
	// corresponding actual card data. Note this is not unique across all cloud
	// token data, which means one card can have multiple sets of cloud token data
	// with the same masked_card_id.
	MaskedCardId *string `protobuf:"bytes,1,opt,name=masked_card_id,json=maskedCardId" json:"masked_card_id,omitempty"`
	// Last 4-5 digits of the Cloud Primary Account Number (CPAN).
	Suffix *string `protobuf:"bytes,2,opt,name=suffix" json:"suffix,omitempty"`
	// CPAN Month number 1-12.
	ExpMonth *int32 `protobuf:"varint,3,opt,name=exp_month,json=expMonth" json:"exp_month,omitempty"`
	// CPAN Four-digit year (e.g. 2017).
	ExpYear *int32 `protobuf:"varint,4,opt,name=exp_year,json=expYear" json:"exp_year,omitempty"`
	// URL of the card art to be displayed for CPAN.
	ArtFifeUrl *string `protobuf:"bytes,5,opt,name=art_fife_url,json=artFifeUrl" json:"art_fife_url,omitempty"`
	// Opaque identifier for the cloud token.
	InstrumentToken *string `protobuf:"bytes,6,opt,name=instrument_token,json=instrumentToken" json:"instrument_token,omitempty"`
}

func (x *WalletCreditCardCloudTokenData) Reset() {
	*x = WalletCreditCardCloudTokenData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_autofill_specifics_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WalletCreditCardCloudTokenData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WalletCreditCardCloudTokenData) ProtoMessage() {}

func (x *WalletCreditCardCloudTokenData) ProtoReflect() protoreflect.Message {
	mi := &file_autofill_specifics_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WalletCreditCardCloudTokenData.ProtoReflect.Descriptor instead.
func (*WalletCreditCardCloudTokenData) Descriptor() ([]byte, []int) {
	return file_autofill_specifics_proto_rawDescGZIP(), []int{7}
}

func (x *WalletCreditCardCloudTokenData) GetMaskedCardId() string {
	if x != nil && x.MaskedCardId != nil {
		return *x.MaskedCardId
	}
	return ""
}

func (x *WalletCreditCardCloudTokenData) GetSuffix() string {
	if x != nil && x.Suffix != nil {
		return *x.Suffix
	}
	return ""
}

func (x *WalletCreditCardCloudTokenData) GetExpMonth() int32 {
	if x != nil && x.ExpMonth != nil {
		return *x.ExpMonth
	}
	return 0
}

func (x *WalletCreditCardCloudTokenData) GetExpYear() int32 {
	if x != nil && x.ExpYear != nil {
		return *x.ExpYear
	}
	return 0
}

func (x *WalletCreditCardCloudTokenData) GetArtFifeUrl() string {
	if x != nil && x.ArtFifeUrl != nil {
		return *x.ArtFifeUrl
	}
	return ""
}

func (x *WalletCreditCardCloudTokenData) GetInstrumentToken() string {
	if x != nil && x.InstrumentToken != nil {
		return *x.InstrumentToken
	}
	return ""
}

type AutofillWalletSpecifics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type *AutofillWalletSpecifics_WalletInfoType `protobuf:"varint,1,opt,name=type,enum=sync_pb.AutofillWalletSpecifics_WalletInfoType" json:"type,omitempty"`
	// This field exists if and only if the "type" field equals to
	// MASKED_CREDIT_CARD.
	MaskedCard *WalletMaskedCreditCard `protobuf:"bytes,2,opt,name=masked_card,json=maskedCard" json:"masked_card,omitempty"`
	// This field exists if and only if the "type" field equals to ADDRESS.
	Address *WalletPostalAddress `protobuf:"bytes,3,opt,name=address" json:"address,omitempty"`
	// This field exists if and only if the "type" field equals to CUSTOMER_DATA.
	CustomerData *PaymentsCustomerData `protobuf:"bytes,4,opt,name=customer_data,json=customerData" json:"customer_data,omitempty"`
	// This field exists if and only if the "type" field equals to
	// CREDIT_CARD_CLOUD_TOKEN_DATA.
	CloudTokenData *WalletCreditCardCloudTokenData `protobuf:"bytes,5,opt,name=cloud_token_data,json=cloudTokenData" json:"cloud_token_data,omitempty"`
}

func (x *AutofillWalletSpecifics) Reset() {
	*x = AutofillWalletSpecifics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_autofill_specifics_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AutofillWalletSpecifics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AutofillWalletSpecifics) ProtoMessage() {}

func (x *AutofillWalletSpecifics) ProtoReflect() protoreflect.Message {
	mi := &file_autofill_specifics_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AutofillWalletSpecifics.ProtoReflect.Descriptor instead.
func (*AutofillWalletSpecifics) Descriptor() ([]byte, []int) {
	return file_autofill_specifics_proto_rawDescGZIP(), []int{8}
}

func (x *AutofillWalletSpecifics) GetType() AutofillWalletSpecifics_WalletInfoType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return AutofillWalletSpecifics_UNKNOWN
}

func (x *AutofillWalletSpecifics) GetMaskedCard() *WalletMaskedCreditCard {
	if x != nil {
		return x.MaskedCard
	}
	return nil
}

func (x *AutofillWalletSpecifics) GetAddress() *WalletPostalAddress {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *AutofillWalletSpecifics) GetCustomerData() *PaymentsCustomerData {
	if x != nil {
		return x.CustomerData
	}
	return nil
}

func (x *AutofillWalletSpecifics) GetCloudTokenData() *WalletCreditCardCloudTokenData {
	if x != nil {
		return x.CloudTokenData
	}
	return nil
}

// Wallet card and address usage information that can be synced.
type WalletMetadataSpecifics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The type of the Wallet metadata.
	Type *WalletMetadataSpecifics_Type `protobuf:"varint,1,opt,name=type,enum=sync_pb.WalletMetadataSpecifics_Type" json:"type,omitempty"`
	// Base64 encoding of the unique ID string of the corresponding Wallet data.
	// For Wallet cards, this value is server generated and opaque to Chrome.
	// For Wallet addresses, this is a SHA1 hash of the following fields:
	//
	// - First name
	// - Middle name
	// - Last name
	// - Company name
	// - Street address
	// - Dependent locality
	// - City
	// - State
	// - Zip code
	// - Sorting code
	// - Country
	// - Phone number
	// - Language code
	Id *string `protobuf:"bytes,2,opt,name=id" json:"id,omitempty"`
	// The number of times that this Wallet card or address was used.
	UseCount *int64 `protobuf:"varint,3,opt,name=use_count,json=useCount" json:"use_count,omitempty"`
	// The last use date of this Wallet card or address. Measured in microseconds
	// since the Windows epoch (1601).
	UseDate *int64 `protobuf:"varint,4,opt,name=use_date,json=useDate" json:"use_date,omitempty"`
	// The id of the profile/address that represents the billing address of this
	// Wallet card.
	CardBillingAddressId *string `protobuf:"bytes,5,opt,name=card_billing_address_id,json=cardBillingAddressId" json:"card_billing_address_id,omitempty"`
	// Whether this Wallet address has been converted to a local autofill profile.
	AddressHasConverted *bool `protobuf:"varint,6,opt,name=address_has_converted,json=addressHasConverted" json:"address_has_converted,omitempty"`
}

func (x *WalletMetadataSpecifics) Reset() {
	*x = WalletMetadataSpecifics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_autofill_specifics_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WalletMetadataSpecifics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WalletMetadataSpecifics) ProtoMessage() {}

func (x *WalletMetadataSpecifics) ProtoReflect() protoreflect.Message {
	mi := &file_autofill_specifics_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WalletMetadataSpecifics.ProtoReflect.Descriptor instead.
func (*WalletMetadataSpecifics) Descriptor() ([]byte, []int) {
	return file_autofill_specifics_proto_rawDescGZIP(), []int{9}
}

func (x *WalletMetadataSpecifics) GetType() WalletMetadataSpecifics_Type {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return WalletMetadataSpecifics_UNKNOWN
}

func (x *WalletMetadataSpecifics) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *WalletMetadataSpecifics) GetUseCount() int64 {
	if x != nil && x.UseCount != nil {
		return *x.UseCount
	}
	return 0
}

func (x *WalletMetadataSpecifics) GetUseDate() int64 {
	if x != nil && x.UseDate != nil {
		return *x.UseDate
	}
	return 0
}

func (x *WalletMetadataSpecifics) GetCardBillingAddressId() string {
	if x != nil && x.CardBillingAddressId != nil {
		return *x.CardBillingAddressId
	}
	return ""
}

func (x *WalletMetadataSpecifics) GetAddressHasConverted() bool {
	if x != nil && x.AddressHasConverted != nil {
		return *x.AddressHasConverted
	}
	return false
}

var File_autofill_specifics_proto protoreflect.FileDescriptor

var file_autofill_specifics_proto_rawDesc = []byte{
	0x0a, 0x18, 0x61, 0x75, 0x74, 0x6f, 0x66, 0x69, 0x6c, 0x6c, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x69,
	0x66, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x73, 0x79, 0x6e, 0x63,
	0x5f, 0x70, 0x62, 0x22, 0xdc, 0x08, 0x0a, 0x18, 0x41, 0x75, 0x74, 0x6f, 0x66, 0x69, 0x6c, 0x6c,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x73,
	0x12, 0x12, 0x0a, 0x04, 0x67, 0x75, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x67, 0x75, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x12, 0x1b, 0x0a, 0x09,
	0x75, 0x73, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x08, 0x75, 0x73, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x75, 0x73, 0x65,
	0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x75, 0x73, 0x65,
	0x44, 0x61, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x66, 0x69, 0x72,
	0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x46, 0x69,
	0x72, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x6d, 0x69, 0x64, 0x64,
	0x6c, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x6e, 0x61, 0x6d, 0x65, 0x4d, 0x69,
	0x64, 0x64, 0x6c, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x6c, 0x61, 0x73,
	0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x61, 0x6d, 0x65, 0x4c, 0x61, 0x73,
	0x74, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x66, 0x75, 0x6c, 0x6c, 0x18, 0x15,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x61, 0x6d, 0x65, 0x46, 0x75, 0x6c, 0x6c, 0x12, 0x23,
	0x0a, 0x0d, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x5f, 0x68, 0x6f, 0x6d, 0x65, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x31, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x10, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x48, 0x6f, 0x6d, 0x65, 0x4c,
	0x69, 0x6e, 0x65, 0x31, 0x12, 0x2c, 0x0a, 0x12, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f,
	0x68, 0x6f, 0x6d, 0x65, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x32, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x10, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x48, 0x6f, 0x6d, 0x65, 0x4c, 0x69, 0x6e,
	0x65, 0x32, 0x12, 0x2a, 0x0a, 0x11, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x68, 0x6f,
	0x6d, 0x65, 0x5f, 0x63, 0x69, 0x74, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x48, 0x6f, 0x6d, 0x65, 0x43, 0x69, 0x74, 0x79, 0x12, 0x2c,
	0x0a, 0x12, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x68, 0x6f, 0x6d, 0x65, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x48, 0x6f, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x28, 0x0a, 0x10,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x68, 0x6f, 0x6d, 0x65, 0x5f, 0x7a, 0x69, 0x70,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x48,
	0x6f, 0x6d, 0x65, 0x5a, 0x69, 0x70, 0x12, 0x30, 0x0a, 0x14, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x5f, 0x68, 0x6f, 0x6d, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x48, 0x6f, 0x6d,
	0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x3d, 0x0a, 0x1b, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x5f, 0x68, 0x6f, 0x6d, 0x65, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x65, 0x74, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x48, 0x6f, 0x6d, 0x65, 0x53, 0x74, 0x72, 0x65, 0x65, 0x74,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x39, 0x0a, 0x19, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x5f, 0x68, 0x6f, 0x6d, 0x65, 0x5f, 0x73, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x48, 0x6f, 0x6d, 0x65, 0x53, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x45, 0x0a, 0x1f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x68, 0x6f,
	0x6d, 0x65, 0x5f, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x6f, 0x63,
	0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1c, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x48, 0x6f, 0x6d, 0x65, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e,
	0x74, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x3b, 0x0a, 0x1a, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x5f, 0x68, 0x6f, 0x6d, 0x65, 0x5f, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61,
	0x67, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x48, 0x6f, 0x6d, 0x65, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61,
	0x67, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x35, 0x0a, 0x17, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f,
	0x68, 0x6f, 0x6d, 0x65, 0x5f, 0x77, 0x68, 0x6f, 0x6c, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x09, 0x52, 0x14, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x48, 0x6f,
	0x6d, 0x65, 0x57, 0x68, 0x6f, 0x6c, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x36, 0x0a,
	0x17, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f,
	0x62, 0x69, 0x74, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x18, 0x20, 0x01, 0x28, 0x03, 0x52, 0x15,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x69, 0x74, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x69, 0x74,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x48, 0x0a, 0x21, 0x69, 0x73, 0x5f, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x73, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x19, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x1d, 0x69, 0x73, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x69,
	0x74, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12,
	0x18, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x02,
	0x18, 0x01, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x37, 0x0a, 0x16, 0x70, 0x68, 0x6f,
	0x6e, 0x65, 0x5f, 0x66, 0x61, 0x78, 0x5f, 0x77, 0x68, 0x6f, 0x6c, 0x65, 0x5f, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x52, 0x13, 0x70,
	0x68, 0x6f, 0x6e, 0x65, 0x46, 0x61, 0x78, 0x57, 0x68, 0x6f, 0x6c, 0x65, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x22, 0xa3, 0x01, 0x0a, 0x11, 0x41, 0x75, 0x74, 0x6f, 0x66, 0x69, 0x6c, 0x6c, 0x53,
	0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0e, 0x75, 0x73, 0x61,
	0x67, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x3b, 0x0a, 0x07, 0x70,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x73,
	0x79, 0x6e, 0x63, 0x5f, 0x70, 0x62, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x66, 0x69, 0x6c, 0x6c, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x73, 0x52,
	0x07, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x22, 0xad, 0x01, 0x0a, 0x0e, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x75, 0x66, 0x66, 0x69, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x75, 0x66,
	0x66, 0x69, 0x78, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x78, 0x70, 0x5f, 0x6d, 0x6f, 0x6e, 0x74, 0x68,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x65, 0x78, 0x70, 0x4d, 0x6f, 0x6e, 0x74, 0x68,
	0x12, 0x19, 0x0a, 0x08, 0x65, 0x78, 0x70, 0x5f, 0x79, 0x65, 0x61, 0x72, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x07, 0x65, 0x78, 0x70, 0x59, 0x65, 0x61, 0x72, 0x12, 0x20, 0x0a, 0x0c, 0x61,
	0x72, 0x74, 0x5f, 0x66, 0x69, 0x66, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x61, 0x72, 0x74, 0x46, 0x69, 0x66, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x29, 0x0a,
	0x10, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x6a, 0x0a, 0x0a, 0x43, 0x61, 0x72, 0x64,
	0x49, 0x73, 0x73, 0x75, 0x65, 0x72, 0x12, 0x32, 0x0a, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x70, 0x62,
	0x2e, 0x43, 0x61, 0x72, 0x64, 0x49, 0x73, 0x73, 0x75, 0x65, 0x72, 0x2e, 0x49, 0x73, 0x73, 0x75,
	0x65, 0x72, 0x52, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x22, 0x28, 0x0a, 0x06, 0x49, 0x73,
	0x73, 0x75, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x0e, 0x49, 0x53, 0x53, 0x55, 0x45, 0x52, 0x5f, 0x55,
	0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x47, 0x4f, 0x4f, 0x47,
	0x4c, 0x45, 0x10, 0x01, 0x22, 0xd8, 0x05, 0x0a, 0x16, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x4d,
	0x61, 0x73, 0x6b, 0x65, 0x64, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x43, 0x61, 0x72, 0x64, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x48, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x30, 0x2e, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x70, 0x62, 0x2e, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x4d, 0x61, 0x73, 0x6b, 0x65, 0x64, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x43, 0x61, 0x72, 0x64,
	0x2e, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x43, 0x61, 0x72, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x20, 0x0a, 0x0c, 0x6e, 0x61, 0x6d,
	0x65, 0x5f, 0x6f, 0x6e, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x6e, 0x61, 0x6d, 0x65, 0x4f, 0x6e, 0x43, 0x61, 0x72, 0x64, 0x12, 0x42, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x73, 0x79, 0x6e, 0x63,
	0x5f, 0x70, 0x62, 0x2e, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x4d, 0x61, 0x73, 0x6b, 0x65, 0x64,
	0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x43, 0x61, 0x72, 0x64, 0x2e, 0x57, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x43, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x1b, 0x0a, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x66, 0x6f, 0x75, 0x72, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x46, 0x6f, 0x75, 0x72, 0x12, 0x1b, 0x0a, 0x09,
	0x65, 0x78, 0x70, 0x5f, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x65, 0x78, 0x70, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x78, 0x70,
	0x5f, 0x79, 0x65, 0x61, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x65, 0x78, 0x70,
	0x59, 0x65, 0x61, 0x72, 0x12, 0x2c, 0x0a, 0x12, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x10, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x61, 0x6e, 0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x61, 0x6e, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x41, 0x0a, 0x10, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x79, 0x6e, 0x63,
	0x5f, 0x70, 0x62, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x34,
	0x0a, 0x0b, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x70, 0x62, 0x2e, 0x43, 0x61,
	0x72, 0x64, 0x49, 0x73, 0x73, 0x75, 0x65, 0x72, 0x52, 0x0a, 0x63, 0x61, 0x72, 0x64, 0x49, 0x73,
	0x73, 0x75, 0x65, 0x72, 0x22, 0x2a, 0x0a, 0x10, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x43, 0x61,
	0x72, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x09, 0x0a, 0x05, 0x56, 0x41, 0x4c, 0x49,
	0x44, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x45, 0x58, 0x50, 0x49, 0x52, 0x45, 0x44, 0x10, 0x01,
	0x22, 0x8a, 0x01, 0x0a, 0x0e, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x43, 0x61, 0x72, 0x64, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00,
	0x12, 0x08, 0x0a, 0x04, 0x41, 0x4d, 0x45, 0x58, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x49,
	0x53, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x10, 0x02, 0x12, 0x07, 0x0a, 0x03, 0x4a, 0x43, 0x42, 0x10,
	0x03, 0x12, 0x0b, 0x0a, 0x07, 0x4d, 0x41, 0x45, 0x53, 0x54, 0x52, 0x4f, 0x10, 0x04, 0x12, 0x0f,
	0x0a, 0x0b, 0x4d, 0x41, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x43, 0x41, 0x52, 0x44, 0x10, 0x05, 0x12,
	0x08, 0x0a, 0x04, 0x53, 0x4f, 0x4c, 0x4f, 0x10, 0x06, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x57, 0x49,
	0x54, 0x43, 0x48, 0x10, 0x07, 0x12, 0x08, 0x0a, 0x04, 0x56, 0x49, 0x53, 0x41, 0x10, 0x08, 0x12,
	0x0c, 0x0a, 0x08, 0x55, 0x4e, 0x49, 0x4f, 0x4e, 0x50, 0x41, 0x59, 0x10, 0x09, 0x4a, 0x04, 0x08,
	0x09, 0x10, 0x0a, 0x52, 0x0a, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x22,
	0xb9, 0x03, 0x0a, 0x13, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x50, 0x6f, 0x73, 0x74, 0x61, 0x6c,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x63, 0x69, 0x70,
	0x69, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21,
	0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x74, 0x72, 0x65, 0x65, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x74, 0x72, 0x65, 0x65,
	0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x5f, 0x31, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x31, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x5f, 0x32, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x32, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x33, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x33, 0x12,
	0x1b, 0x0a, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x34, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x34, 0x12, 0x1f, 0x0a, 0x0b,
	0x70, 0x6f, 0x73, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x70, 0x6f, 0x73, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x21, 0x0a,
	0x0c, 0x73, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6c, 0x61, 0x6e, 0x67,
	0x75, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x68, 0x6f, 0x6e,
	0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x70, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x26, 0x0a, 0x14, 0x50,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x22, 0xe3, 0x01, 0x0a, 0x1e, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x43, 0x72,
	0x65, 0x64, 0x69, 0x74, 0x43, 0x61, 0x72, 0x64, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x24, 0x0a, 0x0e, 0x6d, 0x61, 0x73, 0x6b, 0x65, 0x64,
	0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x6d, 0x61, 0x73, 0x6b, 0x65, 0x64, 0x43, 0x61, 0x72, 0x64, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x75, 0x66, 0x66, 0x69, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x75,
	0x66, 0x66, 0x69, 0x78, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x78, 0x70, 0x5f, 0x6d, 0x6f, 0x6e, 0x74,
	0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x65, 0x78, 0x70, 0x4d, 0x6f, 0x6e, 0x74,
	0x68, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x78, 0x70, 0x5f, 0x79, 0x65, 0x61, 0x72, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x07, 0x65, 0x78, 0x70, 0x59, 0x65, 0x61, 0x72, 0x12, 0x20, 0x0a, 0x0c,
	0x61, 0x72, 0x74, 0x5f, 0x66, 0x69, 0x66, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x61, 0x72, 0x74, 0x46, 0x69, 0x66, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x29,
	0x0a, 0x10, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0xef, 0x03, 0x0a, 0x17, 0x41, 0x75,
	0x74, 0x6f, 0x66, 0x69, 0x6c, 0x6c, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x53, 0x70, 0x65, 0x63,
	0x69, 0x66, 0x69, 0x63, 0x73, 0x12, 0x43, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x70, 0x62, 0x2e, 0x41, 0x75,
	0x74, 0x6f, 0x66, 0x69, 0x6c, 0x6c, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x53, 0x70, 0x65, 0x63,
	0x69, 0x66, 0x69, 0x63, 0x73, 0x2e, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x40, 0x0a, 0x0b, 0x6d, 0x61,
	0x73, 0x6b, 0x65, 0x64, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x70, 0x62, 0x2e, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x4d, 0x61, 0x73, 0x6b, 0x65, 0x64, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x43, 0x61, 0x72, 0x64,
	0x52, 0x0a, 0x6d, 0x61, 0x73, 0x6b, 0x65, 0x64, 0x43, 0x61, 0x72, 0x64, 0x12, 0x36, 0x0a, 0x07,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x73, 0x79, 0x6e, 0x63, 0x5f, 0x70, 0x62, 0x2e, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x50, 0x6f,
	0x73, 0x74, 0x61, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x07, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x42, 0x0a, 0x0d, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x79,
	0x6e, 0x63, 0x5f, 0x70, 0x62, 0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x43, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0c, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x51, 0x0a, 0x10, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x70, 0x62, 0x2e, 0x57, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x43, 0x61, 0x72, 0x64, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x22, 0x7e, 0x0a, 0x0e, 0x57,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a,
	0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x4d, 0x41,
	0x53, 0x4b, 0x45, 0x44, 0x5f, 0x43, 0x52, 0x45, 0x44, 0x49, 0x54, 0x5f, 0x43, 0x41, 0x52, 0x44,
	0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x50, 0x4f, 0x53, 0x54, 0x41, 0x4c, 0x5f, 0x41, 0x44, 0x44,
	0x52, 0x45, 0x53, 0x53, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d,
	0x45, 0x52, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x10, 0x03, 0x12, 0x20, 0x0a, 0x1c, 0x43, 0x52, 0x45,
	0x44, 0x49, 0x54, 0x5f, 0x43, 0x41, 0x52, 0x44, 0x5f, 0x43, 0x4c, 0x4f, 0x55, 0x44, 0x5f, 0x54,
	0x4f, 0x4b, 0x45, 0x4e, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x10, 0x04, 0x22, 0xb3, 0x02, 0x0a, 0x17,
	0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x53, 0x70,
	0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x73, 0x12, 0x39, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x70, 0x62, 0x2e,
	0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x53, 0x70,
	0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x73, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x75, 0x73, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x19, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x07, 0x75, 0x73, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x35, 0x0a, 0x17, 0x63, 0x61,
	0x72, 0x64, 0x5f, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x63, 0x61, 0x72,
	0x64, 0x42, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x49,
	0x64, 0x12, 0x32, 0x0a, 0x15, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x68, 0x61, 0x73,
	0x5f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x13, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x48, 0x61, 0x73, 0x43, 0x6f, 0x6e, 0x76,
	0x65, 0x72, 0x74, 0x65, 0x64, 0x22, 0x2a, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a,
	0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x43, 0x41,
	0x52, 0x44, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x10,
	0x02, 0x42, 0x37, 0x0a, 0x25, 0x6f, 0x72, 0x67, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x69, 0x75,
	0x6d, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x73, 0x79, 0x6e,
	0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x48, 0x03, 0x50, 0x01, 0x5a, 0x0a,
	0x2e, 0x2e, 0x2f, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x70, 0x62,
}

var (
	file_autofill_specifics_proto_rawDescOnce sync.Once
	file_autofill_specifics_proto_rawDescData = file_autofill_specifics_proto_rawDesc
)

func file_autofill_specifics_proto_rawDescGZIP() []byte {
	file_autofill_specifics_proto_rawDescOnce.Do(func() {
		file_autofill_specifics_proto_rawDescData = protoimpl.X.CompressGZIP(file_autofill_specifics_proto_rawDescData)
	})
	return file_autofill_specifics_proto_rawDescData
}

var file_autofill_specifics_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_autofill_specifics_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_autofill_specifics_proto_goTypes = []interface{}{
	(CardIssuer_Issuer)(0),                       // 0: sync_pb.CardIssuer.Issuer
	(WalletMaskedCreditCard_WalletCardStatus)(0), // 1: sync_pb.WalletMaskedCreditCard.WalletCardStatus
	(WalletMaskedCreditCard_WalletCardType)(0),   // 2: sync_pb.WalletMaskedCreditCard.WalletCardType
	(AutofillWalletSpecifics_WalletInfoType)(0),  // 3: sync_pb.AutofillWalletSpecifics.WalletInfoType
	(WalletMetadataSpecifics_Type)(0),            // 4: sync_pb.WalletMetadataSpecifics.Type
	(*AutofillProfileSpecifics)(nil),             // 5: sync_pb.AutofillProfileSpecifics
	(*AutofillSpecifics)(nil),                    // 6: sync_pb.AutofillSpecifics
	(*CloudTokenData)(nil),                       // 7: sync_pb.CloudTokenData
	(*CardIssuer)(nil),                           // 8: sync_pb.CardIssuer
	(*WalletMaskedCreditCard)(nil),               // 9: sync_pb.WalletMaskedCreditCard
	(*WalletPostalAddress)(nil),                  // 10: sync_pb.WalletPostalAddress
	(*PaymentsCustomerData)(nil),                 // 11: sync_pb.PaymentsCustomerData
	(*WalletCreditCardCloudTokenData)(nil),       // 12: sync_pb.WalletCreditCardCloudTokenData
	(*AutofillWalletSpecifics)(nil),              // 13: sync_pb.AutofillWalletSpecifics
	(*WalletMetadataSpecifics)(nil),              // 14: sync_pb.WalletMetadataSpecifics
}
var file_autofill_specifics_proto_depIdxs = []int32{
	5,  // 0: sync_pb.AutofillSpecifics.profile:type_name -> sync_pb.AutofillProfileSpecifics
	0,  // 1: sync_pb.CardIssuer.issuer:type_name -> sync_pb.CardIssuer.Issuer
	1,  // 2: sync_pb.WalletMaskedCreditCard.status:type_name -> sync_pb.WalletMaskedCreditCard.WalletCardStatus
	2,  // 3: sync_pb.WalletMaskedCreditCard.type:type_name -> sync_pb.WalletMaskedCreditCard.WalletCardType
	7,  // 4: sync_pb.WalletMaskedCreditCard.cloud_token_data:type_name -> sync_pb.CloudTokenData
	8,  // 5: sync_pb.WalletMaskedCreditCard.card_issuer:type_name -> sync_pb.CardIssuer
	3,  // 6: sync_pb.AutofillWalletSpecifics.type:type_name -> sync_pb.AutofillWalletSpecifics.WalletInfoType
	9,  // 7: sync_pb.AutofillWalletSpecifics.masked_card:type_name -> sync_pb.WalletMaskedCreditCard
	10, // 8: sync_pb.AutofillWalletSpecifics.address:type_name -> sync_pb.WalletPostalAddress
	11, // 9: sync_pb.AutofillWalletSpecifics.customer_data:type_name -> sync_pb.PaymentsCustomerData
	12, // 10: sync_pb.AutofillWalletSpecifics.cloud_token_data:type_name -> sync_pb.WalletCreditCardCloudTokenData
	4,  // 11: sync_pb.WalletMetadataSpecifics.type:type_name -> sync_pb.WalletMetadataSpecifics.Type
	12, // [12:12] is the sub-list for method output_type
	12, // [12:12] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_autofill_specifics_proto_init() }
func file_autofill_specifics_proto_init() {
	if File_autofill_specifics_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_autofill_specifics_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AutofillProfileSpecifics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_autofill_specifics_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AutofillSpecifics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_autofill_specifics_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CloudTokenData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_autofill_specifics_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CardIssuer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_autofill_specifics_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WalletMaskedCreditCard); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_autofill_specifics_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WalletPostalAddress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_autofill_specifics_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PaymentsCustomerData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_autofill_specifics_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WalletCreditCardCloudTokenData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_autofill_specifics_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AutofillWalletSpecifics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_autofill_specifics_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WalletMetadataSpecifics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_autofill_specifics_proto_rawDesc,
			NumEnums:      5,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_autofill_specifics_proto_goTypes,
		DependencyIndexes: file_autofill_specifics_proto_depIdxs,
		EnumInfos:         file_autofill_specifics_proto_enumTypes,
		MessageInfos:      file_autofill_specifics_proto_msgTypes,
	}.Build()
	File_autofill_specifics_proto = out.File
	file_autofill_specifics_proto_rawDesc = nil
	file_autofill_specifics_proto_goTypes = nil
	file_autofill_specifics_proto_depIdxs = nil
}
